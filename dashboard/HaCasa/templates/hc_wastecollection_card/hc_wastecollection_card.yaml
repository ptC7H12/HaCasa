type: custom:button-card
variables:
  trash_entities:
    - entity: sensor.restmull
      name: Restmüll
      icon: mdi:trash-can
      style: "color: #FF0000;"
    - entity: sensor.papierbehalter
      name: Papiermüll
      icon: mdi:paperclip
      style: "color: #0000FF;"
    - entity: sensor.wertstofftonne
      name: Wertstoff
      icon: mdi:recycle
      style: "color: #008000;"
  "y": |
    [[[
      // Definiere die Entitäten für Müllabholungen
      const trashData = variables.trash_entities.map(entity => ({
        entity: entity.entity,
        name: entity.name,
        icon: entity.icon,
        style: entity.style,
        days_left: states[entity.entity] ? parseInt(states[entity.entity].state, 10) : 0
      }));

      // Sortiere das Array basierend auf der verbleibenden Anzahl der Tage
      trashData.sort((a, b) => a.days_left - b.days_left);

      return JSON.stringify(trashData); // Als String zurückgeben
    ]]]  
name: Müllabholung
icon: mdi:trash-can
styles:
  icon:
    - width: 20px
    - height: 20px
  name:
    - justify-self: start
    - align-self: end
    - font-family: montserrat
    - font-weight: 700
  grid:
    - grid-template-areas: |
        "i n"
        "first first"
        "second second"
        "third third"
    - grid-template-rows: auto 1fr 1fr 1fr
    - grid-template-columns: auto 1fr
custom_fields:
  first:
    card:
      type: custom:button-card
      card_mod:
        style: |
          ha-card {
            padding: 5px !important;
          }
      icon: |
        [[[
          const trashData = JSON.parse(variables.y); // JSON zurück in ein Array umwandeln
          const first = trashData[0];
          return first ? first.icon : null;
        ]]]
      name: |
        [[[
          const trashData = JSON.parse(variables.y);
          const first = trashData[0];
          return first ? first.name : '';
        ]]]
      custom_fields:
        state: |
          [[[
            const trashData = JSON.parse(variables.y);
            const first = trashData[0];
            if (!first) return '';
            
            // Bedingungen für days_left
            if (first.days_left === 0) {
              return "today";
            } else if (first.days_left === 1) {
              return "tomorrow";
            } else {
              return `in ${first.days_left} days`;
            }
          ]]]
      styles:
        grid:
          - grid-template-areas: |
              'i n state'
          - grid-template-columns: 60px min-content min-content
        icon:
          - width: 40px
          - color: |
              [[[
                const trashData = JSON.parse(variables.y);
                const first = trashData[0];
                return first ? first.style.match(/color:\s*(#[0-9A-Fa-f]{6}|#[0-9A-Fa-f]{3}|[a-zA-Z]+)/)[1] : 'gray';
              ]]]
        card:
          - box-shadow: 1px
          - background: none
          - height: auto
        img_cell:
          - width: 40px
          - height: 40px
          - background: |
              [[[
                const trashData = JSON.parse(variables.y);
                const first = trashData[0];
                if (first) {
                  const color = first.style.match(/color:\s*(#[0-9A-Fa-f]{6}|#[0-9A-Fa-f]{3}|[a-zA-Z]+)/)[1];
                  if (color.startsWith('#')) {
                    // Konvertiere Hex-Farbe in rgba mit 60% Deckkraft
                    const r = parseInt(color.slice(1, 3), 16);
                    const g = parseInt(color.slice(3, 5), 16);
                    const b = parseInt(color.slice(5, 7), 16);
                    return `rgba(${r}, ${g}, ${b}, 0.2)`;
                  }
                  return `${color}99`; // Für benannte Farben (60% Transparenz in hex)
                }
                return 'rgba(128, 128, 128, 0.2)'; // Standard: Grau mit 60% Deckkraft
              ]]]
          - padding: 5px
          - border-radius: 50px
          - justify-self: center
  second:
    card:
      type: custom:button-card
      card_mod:
        style: |
          ha-card {
            padding: 5px !important;
          }
      icon: |
        [[[
          const trashData = JSON.parse(variables.y); // JSON zurück in ein Array umwandeln
          const second = trashData[1];
          return second ? second.icon : null;
        ]]]
      name: |
        [[[
          const trashData = JSON.parse(variables.y);
          const second = trashData[1];
          return second ? second.name : '';
        ]]]
      custom_fields:
        state: |
          [[[
            const trashData = JSON.parse(variables.y);
            const first = trashData[1];
            if (!first) return '';
            
            // Bedingungen für days_left
            if (first.days_left === 0) {
              return "today";
            } else if (first.days_left === 1) {
              return "tomorrow";
            } else {
              return `in ${first.days_left} days`;
            }
          ]]]
      styles:
        grid:
          - grid-template-areas: |
              'i n state'
          - grid-template-columns: 50px min-content min-content
          - align-items: center
        icon:
          - width: 40px
        card:
          - box-shadow: 1px
          - background: none
        img_cell:
          - width: 40px
          - height: 40px
          - background: rgba(var(--contrast-100),0.05)
          - padding: 5px
          - border-radius: 50px
          - justify-self: end
  third:
    card:
      type: custom:button-card
      card_mod:
        style: |
          ha-card {
            padding: 5px !important;
          }
      icon: |
        [[[
          const trashData = JSON.parse(variables.y); // JSON zurück in ein Array umwandeln
          const third = trashData[2];
          return third ? third.icon : null;
        ]]]
      name: |
        [[[
          const trashData = JSON.parse(variables.y);
          const third = trashData[2];
          return third ? third.name : '';
        ]]]
      custom_fields:
        state: |
          [[[
            const trashData = JSON.parse(variables.y);
            const first = trashData[2];
            if (!first) return '';
            
            // Bedingungen für days_left
            if (first.days_left === 0) {
              return "today";
            } else if (first.days_left === 1) {
              return "tomorrow";
            } else {
              return `in ${first.days_left} days`;
            }
          ]]]
      styles:
        grid:
          - grid-template-areas: |
              'i n state'
          - grid-template-columns: 50px min-content min-content
          - align-items: center
        icon:
          - width: 40px
        card:
          - box-shadow: 1px
          - background: none
        img_cell:
          - width: 40px
          - height: 40px
          - background: rgba(var(--contrast-100),0.05)
          - padding: 5px
          - border-radius: 50px
          - justify-self: end
